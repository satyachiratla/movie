{"ast":null,"code":"var _jsxFileName = \"/Users/vivekchowdary/My World/MovieHTTP/src/App.js\";\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\nimport AddMovie from \"./components/AddMovie\";\n\nfunction App() {\n  const dummyMovies = [{\n    id: 1,\n    title: \"Game Of Thrones\",\n    openingText: \"Nine noble families fought to win the Iron Throne.\",\n    releaseDate: \"2011-05-18\"\n  }, {\n    id: 2,\n    title: \"Stranger Things\",\n    openingText: \"This is the second opening text of the movie\",\n    releaseDate: \"2016-05-19\"\n  }];\n  const [showButton, setShowButton] = useState(false);\n  const [movies, setMovies] = useState(dummyMovies);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null); //const api_key = \"https://api.themoviedb.org/3/tv/popular?api_key=de9929f37ff02f5324c8210f01ea2eff\";\n  //const api = \"https://api.themoviedb.org/3/discover/movie?sort_by=popularity.desc&api_key=de9929f37ff02f5324c8210f01ea2eff\"\n\n  const api_key = 'https://movie-1cdc7-default-rtdb.firebaseio.com/movies.json';\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(api_key);\n\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const data = await response.json();\n      let loadedMovies = [];\n\n      for (const key in data) {\n        loadedMovies.push({\n          id: key,\n          title: data[key].title,\n          openingText: data[key].openingText,\n          releaseDate: data[key].releaseDate\n        });\n      }\n\n      setMovies(loadedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setIsLoading(false);\n  }, []);\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n\n  const addMovieHandler = async movie => {\n    const response = await fetch(api_key, {\n      method: \"POST\",\n      body: JSON.stringify(movie),\n      headers: {\n        \"Content-Type\": 'application/json'\n      }\n    });\n    const data = await response.json();\n    console.log(data);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, showButton && /*#__PURE__*/React.createElement(AddMovie, {\n    onAddMovie: addMovieHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, \"Add \")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMoviesHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, !isLoading && movies.length > 0 && /*#__PURE__*/React.createElement(MoviesList, {\n    movies: movies,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 45\n    }\n  }), !isLoading && movies.length === 0 && !error && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 57\n    }\n  }, \"Found No Movies!\"), !isLoading && error && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 33\n    }\n  }, error), isLoading && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 23\n    }\n  }, \"Loading...\")));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/vivekchowdary/My World/MovieHTTP/src/App.js"],"names":["React","useEffect","useState","useCallback","MoviesList","AddMovie","App","dummyMovies","id","title","openingText","releaseDate","showButton","setShowButton","movies","setMovies","isLoading","setIsLoading","error","setError","api_key","fetchMoviesHandler","response","fetch","ok","Error","data","json","loadedMovies","key","push","message","addMovieHandler","movie","method","body","JSON","stringify","headers","console","log","length"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useCallback } from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\nimport AddMovie from \"./components/AddMovie\";\n\nfunction App() {\n  const dummyMovies = [\n    {\n      id: 1,\n      title: \"Game Of Thrones\",\n      openingText: \"Nine noble families fought to win the Iron Throne.\",\n      releaseDate: \"2011-05-18\",\n    },\n    {\n      id: 2,\n      title: \"Stranger Things\",\n      openingText: \"This is the second opening text of the movie\",\n      releaseDate: \"2016-05-19\",\n    },\n  ];\n\n  const [showButton, setShowButton] = useState(false);\n\n  const [movies, setMovies] = useState(dummyMovies);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  //const api_key = \"https://api.themoviedb.org/3/tv/popular?api_key=de9929f37ff02f5324c8210f01ea2eff\";\n  //const api = \"https://api.themoviedb.org/3/discover/movie?sort_by=popularity.desc&api_key=de9929f37ff02f5324c8210f01ea2eff\"\n  const api_key = 'https://movie-1cdc7-default-rtdb.firebaseio.com/movies.json'\n\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(api_key);\n\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const data = await response.json();\n\n      let loadedMovies = []\n\n      for (const key in data) {\n        loadedMovies.push({\n          id: key,\n          title: data[key].title,\n          openingText: data[key].openingText,\n          releaseDate: data[key].releaseDate\n        })\n      }\n      setMovies(loadedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n  }, [])\n\n  useEffect(() => {\n    fetchMoviesHandler()\n  }, [fetchMoviesHandler])\n\n  const addMovieHandler = async (movie) => {\n    const response = await fetch(api_key, {\n      method: \"POST\",\n      body: JSON.stringify(movie),\n      headers: {\n        \"Content-Type\": 'application/json'\n      }\n    })\n    const data = await response.json();\n    console.log(data);\n  }\n\n  return (\n    <React.Fragment>\n      <section>\n      { showButton && <AddMovie onAddMovie={addMovieHandler} /> }\n      <button>Add </button>\n      </section>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>\n        {!isLoading && movies.length > 0 && <MoviesList movies={movies} />}\n        {!isLoading && movies.length === 0 && !error && <p>Found No Movies!</p>}\n        {!isLoading && error && <p>{error}</p>}\n        {isLoading && <p>Loading...</p>}\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}